<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="147" tokens="596">
<file line="56" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNames.java"/>
<file line="84" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesParser.java"/>
<codefragment>
<![CDATA[
	public ArrayList<String> getNonCommentLines(final Collection<String> lines) {
		final ArrayList<String> retval = new ArrayList<String>();

		for (final String line : lines) {

			boolean isComment = false;
			for (int i = 0; i < line.length(); i++) {
				final char c = line.charAt(i);
				if (c == ' ' || c == '\t') {
					continue;
				}
				if (c == '#') {
					isComment = true;
					break;
				}
				isComment = false;
				break;
			}
			if (isComment) {
				// logger.info("discarding " + line);
			} else {
				// logger.info("adding " + line);
				retval.add(line);
			}

		}
		return retval;
	}
	

	/**
	 * Filters out all lines up to and including the last line with a '[' or ']'
	 * character
	 * 
	 * @param lines
	 * @return
	 */
	public ArrayList<String> getNonDescriptionLines(
			final ArrayList<String> lines) {
		final ArrayList<String> retval = new ArrayList<String>();
		int lastDescrLineNumber = -1;
		for (int i = 0; i < lines.size(); i++) {
			final String s = lines.get(i);
			if (s.indexOf("]") > -1 || s.indexOf("[") > -1) {
				lastDescrLineNumber = i;
			}
		}

		for (int i = lastDescrLineNumber + 1; i < lines.size(); i++) {
			retval.add(lines.get(i));
		}

		return retval;
	}

	public static String getOracleHome() {
		return System.getenv(ORACLE_HOME);
	}

	public File getOracleHomeTnsNamesFile() {
		final String pathName = System.getenv(ORACLE_HOME);
		File retval = null;
		if (pathName != null) {
			final String fileName = pathName + "/network/admin/tnsnames.ora";
			retval = new File(fileName);
		}
		return retval;
	}

	public String getTnsAdmin() {
		return System.getenv(TNS_ADMIN);
	}

	public File getTnsAdminFile() {

		final String pathName = System.getenv(TNS_ADMIN);
		File retval = null;

		if (pathName != null) {
			final String fileName = pathName + "/tnsnames.ora";
			retval = new File(fileName);
		} else {
			logger.debug(TNS_ADMIN + " is not set");
		}
		return retval;
	}

	public String getMessage() {
		return message;
	}

	private String getQuoted(final String text) {
		final String rc = text == null ? "null" : "'" + text + "'";
		return rc;
	}

	public File getTnsNamesFile() {

		File f = getTnsAdminFile();
		if (tnsnamesFile != null) {
			f = tnsnamesFile;
		}
		if (f != null) {
			logger.debug("using " + f.getAbsolutePath() + " from " + TNS_ADMIN);

		} else {
			f = getOracleHomeTnsNamesFile();
			if (f == null) {
				message = "no file can be found: " + newline + ORACLE_HOME
						+ " is " + getQuoted(getOracleHome()) + newline
						+ TNS_ADMIN + " is " + getQuoted(getTnsAdmin());
				logger.warn(message);
				throw new IllegalArgumentException(message);
			}
		}
		return f;
	}

	public String getEntryText() throws IOException {
		final ArrayList<String> allLines = TextFileHelper
				.getLines(getTnsNamesFile());
		final ArrayList<String> nonCommentLines = getNonCommentLines(allLines);
		final ArrayList<String> lines = getNonDescriptionLines(nonCommentLines);
		final StringBuilder sb = new StringBuilder();
		for (final String line : lines) {
			sb.append(line);
		}
		final String text = sb.toString();
		return text;
	}
//	  <entry name="ORA1010">
//	    <description>
//	      <address>
//	        <protocol>TCP</protocol>
//	        <host>stadq33.us.oracle.com</host>
//	        <port>1521</port>
//	      </address>
//	      <connect_data>
//	        <server>DEDICATED</server>
//	        <service_name>ora1010.us.oracle.com</service_name>
//	      </connect_data>
//	    </description>
//	  </entry>



	public Map<String,TnsnamesEntryBean> getEntries() throws IOException {
]]>
</codefragment>
</duplication>
<duplication lines="133" tokens="523">
<file line="243" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNames.java"/>
<file line="212" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesParser.java"/>
<codefragment>
<![CDATA[
	}
	public void writeAsXmlToFile(final File tnsXmlFile) throws IOException {
		final Document tnsDoc = getAsDocument();

		final OutputFormat formatter = OutputFormat.createPrettyPrint();

		final FileWriter fw = new FileWriter(tnsXmlFile);
		final XMLWriter xw = new XMLWriter(fw, formatter);
		xw.write(tnsDoc);
		fw.close();
	}

	public Document getAsDocument() throws IOException {
		final Element root = getAsElement();

		final Document document = DocumentHelper.createDocument();
		document.setRootElement(root);
		return document;

	}

	public String getAsXml() throws IOException {
		final Element el = getAsElement();
		final OutputFormat formatter = OutputFormat.createPrettyPrint();
		final StringWriter sw = new StringWriter();
		final XMLWriter xw = new XMLWriter(sw, formatter);
		xw.write(el);
		return sw.toString();
	}

	public Element getAsElement() throws IOException {
		return getAsElement(getEntryText());
	}

	/**
	 * Get TNS Names entries. Assumes standard tnsmanes.ora formatting of NetMgr
	 * TODO migrate to TnsNamesRenderer
	 * 
	 * @param tnsnames
	 *            content of tnsnames.ora
	 * @return tns names or null
	 * @throws IOException
	 */
	private Element getAsElement(final String text) {
		final Element root = DocumentHelper.createElement("tnsnames");
		Element entry = null;
		Element currentElement = root;

		Token token;

		final int ADD_ENTRY = 3;
		final int ADD_ELEMENT = 1;
		final int ADD_ATTRIBUTE = 2;
		int nextAction = ADD_ENTRY;

		final TnsNamesTokenizer st = new TnsNamesTokenizer(text);
		while (st.hasMoreTokens()) {
			token = st.nextToken();
			switch (token.getType()) {
			case WHITE:
				continue;
			case OPEN_PAREN:
				nextAction = ADD_ELEMENT;
				token = st.nextToken();
				currentElement = currentElement.addElement(token.getValue()
						.toLowerCase());
				continue;
			case CLOSE_PAREN:
				if (currentElement == null) {
					throw new IllegalStateException("unbalanced parens");
				}
				currentElement = currentElement.getParent();
				if (currentElement == entry) {
					nextAction = ADD_ENTRY;
				}
				continue;
			case EQUALS:
				nextAction = ADD_ATTRIBUTE;
				continue;
			}

			switch (nextAction) {
			case ADD_ATTRIBUTE:
				currentElement.setText(token.getValue());
				break;
			case ADD_ELEMENT:
				final String elementName = token.getValue().toLowerCase();
				currentElement.addElement(elementName);
				break;
			case ADD_ENTRY:
				entry = currentElement = root.addElement("entry");
				currentElement.addAttribute("name", token.getValue());
				break;
			}

		}

		return root;
	}

	class Token {

		String val;
		int tokenType;

		Token(final String val) {
			this.val = val;
			if ("(".equals(val)) {
				tokenType = OPEN_PAREN;
			} else if ("=".equals(val)) {
				tokenType = EQUALS;
			} else if (")".equals(val)) {
				tokenType = CLOSE_PAREN;
			} else if (" ".equals(val) || "\t".equals(val)) {
				tokenType = WHITE;
			} else {
				tokenType = TEXT;
			}
			// System.out.println("token: '" + val + "'");
		}

		String getValue() {
			return val;
		}

		boolean compareTo(final String other) {
			return val.equals(other);
		}

		int getType() {
			return tokenType;
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="275">
<file line="22" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/dao/OracleForeignKeyDaoImpl.java"/>
<file line="85" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/metadata/dao/OracleConstraintsDAO.java"/>
<codefragment>
<![CDATA[
	public static void getRow(ResultSet rset, OracleForeignKey row)
			throws java.sql.SQLException {
		String columnName = null;

		try {
			row.setOwner(rset.getString(columnName = "OWNER"));
			row.setConstraintName(rset
					.getString(columnName = "CONSTRAINT_NAME"));
			row.setConstraintType(rset
					.getString(columnName = "CONSTRAINT_TYPE"));
			row.setTableName(rset.getString(columnName = "TABLE_NAME"));
			row.setSearchCondition(rset
					.getString(columnName = "SEARCH_CONDITION"));
			row.setROwner(rset.getString(columnName = "R_OWNER"));
			row.setRConstraintName(rset
					.getString(columnName = "R_CONSTRAINT_NAME"));
			row.setDeleteRule(rset.getString(columnName = "DELETE_RULE"));
			row.setStatus(rset.getString(columnName = "STATUS"));
			row.setDeferrable(rset.getString(columnName = "DEFERRABLE"));
			row.setDeferred(rset.getString(columnName = "DEFERRED"));
			row.setValidated(rset.getString(columnName = "VALIDATED"));
			row.setGenerated(rset.getString(columnName = "GENERATED"));
			row.setBad(rset.getString(columnName = "BAD"));
			row.setRely(rset.getString(columnName = "RELY"));
			row.setLastChange(rset.getTimestamp(columnName = "LAST_CHANGE"));
			row.setIndexOwner(rset.getString(columnName = "INDEX_OWNER"));
			row.setIndexName(rset.getString(columnName = "INDEX_NAME"));
			row.setInvalid(rset.getString(columnName = "INVALID"));
			row.setViewRelated(rset.getString(columnName = "VIEW_RELATED"));
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="187">
<file line="85" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/servicerequest/RequestArgumentParser.java"/>
<file line="117" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/servicerequest/RequestArgumentParser.java"/>
<codefragment>
<![CDATA[
	public String toString() {
		final StringBuffer buff = new StringBuffer(1024);
		Iterator<RequestParameter> argIt = arguments.iterator();
		int maxParmLength = 0;
		buff.append("<arguments>\n");
		// get maximum parameter name length make it purty
		argIt = arguments.iterator();
		String spaces = "                                                                                           ";
		while (argIt.hasNext()) {
			final RequestParameter rq = argIt.next();
			final int length = rq.getName().length();
			if (length > maxParmLength) {
				maxParmLength = length;
			}
		}

		// expand as necessary
		while (spaces.length() < maxParmLength) {
			spaces = spaces + spaces;
		}
		argIt = arguments.iterator();
		while (argIt.hasNext()) {
			final RequestParameter rq = argIt.next();
			final int leftPadLength = maxParmLength - rq.getName().length();
			buff.append(spaces.substring(0, leftPadLength));
			buff.append(rq.toXml());
			buff.append("\n");
		}
		buff.append("</arguments>\n");
		return new String(buff);
	}
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="143">
<file line="1120" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/OracleConnectionHelper.java"/>
<file line="231" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/OracleConnectionUtil.java"/>
<codefragment>
<![CDATA[
	public void setModule(final String module) throws java.sql.SQLException {
		String text = module;
		if (text.length() > 48) {
			final int end = text.length() - 1;
			final int begin = end - 48;
			text = module.substring(begin, end);
		}
		try {
			if (sqlModule == null) {
				final String txt = "{call dbms_application_info.set_module(?,?)}";
				sqlModule = getConn().prepareCall(txt);
			}
			sqlModule.setString(1, text);
			sqlModule.setString(2, "");
			sqlModule.execute();
		} catch (final java.lang.NullPointerException n) {
			if (getConn() == null) {
				throw new java.lang.IllegalStateException("conn is null");
			}
			throw n;
		}
	}

	public void setPlsqlWarnings(final String arg0) throws SQLException {
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="138">
<file line="76" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNames.java"/>
<file line="101" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesFileParser.java"/>
<file line="104" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesParser.java"/>
<codefragment>
<![CDATA[
			} else {
				// logger.info("adding " + line);
				retval.add(line);
			}

		}
		return retval;
	}
	

	/**
	 * Filters out all lines up to and including the last line with a '[' or ']'
	 * character
	 * 
	 * @param lines
	 * @return
	 */
	public ArrayList<String> getNonDescriptionLines(
			final ArrayList<String> lines) {
		final ArrayList<String> retval = new ArrayList<String>();
		int lastDescrLineNumber = -1;
		for (int i = 0; i < lines.size(); i++) {
			final String s = lines.get(i);
			if (s.indexOf("]") > -1 || s.indexOf("[") > -1) {
				lastDescrLineNumber = i;
			}
		}

		for (int i = lastDescrLineNumber + 1; i < lines.size(); i++) {
			retval.add(lines.get(i));
		}

		return retval;
	}

	public static String getOracleHome() {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="110">
<file line="682" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/OracleConnectionHelper.java"/>
<file line="165" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/oracle/OracleConnectionUtil.java"/>
<codefragment>
<![CDATA[
				final ResultSet rset = stmt.executeQuery(text);
				rset.next();
				sid = rset.getInt("sid");
				serial = rset.getInt("serial#");
				spid = rset.getInt("spid");
				pid = rset.getInt("pid");
				logger.info("sid " + sid + " serial " + serial + " spid " + spid + " pid " + pid);
				haveSessionInfo = true;
			} catch (final SQLException e) {
				final String message = "while processing " + text + " " + e.getMessage();
				if (throwSysExceptions) {
					throw new SQLException(message);
				}
				logger.error(message);

			}
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="107">
<file line="72" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesFileParser.java"/>
<file line="50" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesParser.java"/>
<codefragment>
<![CDATA[
		return sw.toString();
	}

	/**
	 * Filters out lines where the first non white character is '#'
	 * 
	 * @param lines
	 * @return
	 */
	public ArrayList<String> getNonCommentLines(final Collection<String> lines) {
		final ArrayList<String> retval = new ArrayList<String>();

		for (final String line : lines) {

			boolean isComment = false;
			for (int i = 0; i < line.length(); i++) {
				final char c = line.charAt(i);
				if (c == ' ' || c == '\t') {
					continue;
				}
				if (c == '#') {
					isComment = true;
					break;
				}
				isComment = false;
				break;
			}
			if (isComment) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="104">
<file line="56" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNames.java"/>
<file line="81" path="/common/home/jjs/workspace/javautil-oracle/src/main/java/org/javautil/jdbc/oracle/TnsNamesFileParser.java"/>
<codefragment>
<![CDATA[
	public ArrayList<String> getNonCommentLines(final Collection<String> lines) {
		final ArrayList<String> retval = new ArrayList<String>();

		for (final String line : lines) {

			boolean isComment = false;
			for (int i = 0; i < line.length(); i++) {
				final char c = line.charAt(i);
				if (c == ' ' || c == '\t') {
					continue;
				}
				if (c == '#') {
					isComment = true;
					break;
				}
				isComment = false;
				break;
			}
			if (isComment) {
]]>
</codefragment>
</duplication>
</pmd-cpd>